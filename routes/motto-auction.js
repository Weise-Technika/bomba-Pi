import express from "express";
import puppeteer from "puppeteer-core"; // ‡πÉ‡∏ä‡πâ puppeteer-core ‡πÅ‡∏ó‡∏ô puppeteer
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";

dotenv.config();

const router = express.Router();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô delay
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ __filename ‡πÅ‡∏•‡∏∞ __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const scrapeData = async (page) => {
  const data = await page.evaluate(() => {
    const bidHistories = document.querySelectorAll(".bid-history");
    return Array.from(bidHistories).map(bidHistory => {
      const elements = bidHistory.querySelectorAll("span");
      return Array.from(elements).map(el => el.textContent.trim());
    });
  });

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
  const outputFilePath = path.join(__dirname, "../data/motto-auction-data.json");

  let outputData = { bidHistories: [] };
  if (fs.existsSync(outputFilePath)) {
    const existingData = fs.readFileSync(outputFilePath, "utf-8");
    if (existingData) {
      outputData = JSON.parse(existingData);
    }
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô outputData.bidHistories ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
  data.forEach((bidHistory, index) => {
    if (!outputData.bidHistories[index]) {
      outputData.bidHistories[index] = [];
    }
    bidHistory.forEach(item => {
      if (!outputData.bidHistories[index].includes(item)) {
        outputData.bidHistories[index].push(item);
      }
    });
  });

  fs.writeFileSync(outputFilePath, JSON.stringify(outputData, null, 4), "utf-8");
};

router.post("/", async (req, res) => {
  const link =
    "http://lanes.simulcast2.mottoauction.com/Account/Login?ReturnUrl=%2fsimulcast";

  let browser;
  try {
    browser = await puppeteer.launch({      
      executablePath: '/usr/bin/chromium',
      headless: true,
      defaultViewport: null,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();

    await page.goto(link, { waitUntil: "domcontentloaded" });

    // ‡∏Ñ‡∏•‡∏¥‡∏Å dropdown ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    await page.waitForSelector("#culture");
    await page.select("#culture", "th-TH");

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà input field ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    await page.waitForSelector('input[name="UserName"]');
    await page.focus('input[name="UserName"]');
    await page.type('input[name="UserName"]', process.env.USERNAME, {
      delay: 100,
    });

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà input field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    await page.waitForSelector('input[name="Password"]');
    await page.focus('input[name="Password"]');
    await page.type('input[name="Password"]', process.env.PASSWORD, { delay: 100 });

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    await page.waitForSelector('button[type="submit"].btn-login');
    await page.click('button[type="submit"].btn-login');
    await delay(1000);

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà checkbox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    await page.waitForSelector('input[name="terms"]');
    await page.click('input[name="terms"]');
   
    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
    await page.waitForSelector("button#hidden");
    await page.click("button#hidden");

    console.log("üöÄ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    
    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢" ‡∏ó‡∏∏‡∏Å‡∏õ‡∏∏‡πà‡∏°
    await delay(10000);

    let buttonClickCount = 0; 
    
    try {
      const enterSaleButtons = await page.$$("a.enter-sale");
      for (const button of enterSaleButtons) {
        await button.click();
        buttonClickCount++; 
        await delay(1000); 
      }
      console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏î: ${buttonClickCount}`);
    } catch (err) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
    }
   
    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå "‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á"
    try {
      await page.waitForSelector("a.turn-audio-off", { timeout: 30000 });
      await page.click("a.turn-audio-off");
    } catch (err) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
    }

    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå "‡∏õ‡∏¥‡∏î video"
    try {
      await page.waitForSelector("a.turn-video-off", { timeout: 30000 });
      await page.click("a.turn-video-off");
    } catch (err) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î video ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
    }

    while (true) {
      await scrapeData(page);
      try {
        await page.waitForFunction(
          () => {
            const elements = document.querySelectorAll(".bid-history");
            return elements.length > 0;
          },
          { timeout: 600000 }
        );
        console.log("‚≠ï ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà");
      } catch (error) {
        console.log("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤");
      }
      await delay(5000);
    }

    // ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
    // await browser.close();
    res.send("Scraping done");
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    res.status(500).send("Error occurred while scraping");
  } finally {
    if (browser) {
      try {
        await browser.close();
      } catch (closeError) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå:", closeError);
      }
    }
  }
});

export default router;

